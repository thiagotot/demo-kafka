/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.alianca.intercab.emp.transactionreturn;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Place extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -345061581237026675L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Place\",\"namespace\":\"com.alianca.intercab.emp.transactionreturn\",\"fields\":[{\"name\":\"TransactionId\",\"type\":\"int\"},{\"name\":\"ExternalSystemName\",\"type\":\"string\"},{\"name\":\"ReturnCode\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Place> ENCODER =
      new BinaryMessageEncoder<Place>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Place> DECODER =
      new BinaryMessageDecoder<Place>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Place> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Place> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Place>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Place to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Place from a ByteBuffer. */
  public static Place fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int TransactionId;
  @Deprecated public java.lang.CharSequence ExternalSystemName;
  @Deprecated public java.lang.CharSequence ReturnCode;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Place() {}

  /**
   * All-args constructor.
   * @param TransactionId The new value for TransactionId
   * @param ExternalSystemName The new value for ExternalSystemName
   * @param ReturnCode The new value for ReturnCode
   */
  public Place(java.lang.Integer TransactionId, java.lang.CharSequence ExternalSystemName, java.lang.CharSequence ReturnCode) {
    this.TransactionId = TransactionId;
    this.ExternalSystemName = ExternalSystemName;
    this.ReturnCode = ReturnCode;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return TransactionId;
    case 1: return ExternalSystemName;
    case 2: return ReturnCode;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: TransactionId = (java.lang.Integer)value$; break;
    case 1: ExternalSystemName = (java.lang.CharSequence)value$; break;
    case 2: ReturnCode = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'TransactionId' field.
   * @return The value of the 'TransactionId' field.
   */
  public java.lang.Integer getTransactionId() {
    return TransactionId;
  }

  /**
   * Sets the value of the 'TransactionId' field.
   * @param value the value to set.
   */
  public void setTransactionId(java.lang.Integer value) {
    this.TransactionId = value;
  }

  /**
   * Gets the value of the 'ExternalSystemName' field.
   * @return The value of the 'ExternalSystemName' field.
   */
  public java.lang.CharSequence getExternalSystemName() {
    return ExternalSystemName;
  }

  /**
   * Sets the value of the 'ExternalSystemName' field.
   * @param value the value to set.
   */
  public void setExternalSystemName(java.lang.CharSequence value) {
    this.ExternalSystemName = value;
  }

  /**
   * Gets the value of the 'ReturnCode' field.
   * @return The value of the 'ReturnCode' field.
   */
  public java.lang.CharSequence getReturnCode() {
    return ReturnCode;
  }

  /**
   * Sets the value of the 'ReturnCode' field.
   * @param value the value to set.
   */
  public void setReturnCode(java.lang.CharSequence value) {
    this.ReturnCode = value;
  }

  /**
   * Creates a new Place RecordBuilder.
   * @return A new Place RecordBuilder
   */
  public static com.alianca.intercab.emp.transactionreturn.Place.Builder newBuilder() {
    return new com.alianca.intercab.emp.transactionreturn.Place.Builder();
  }

  /**
   * Creates a new Place RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Place RecordBuilder
   */
  public static com.alianca.intercab.emp.transactionreturn.Place.Builder newBuilder(com.alianca.intercab.emp.transactionreturn.Place.Builder other) {
    return new com.alianca.intercab.emp.transactionreturn.Place.Builder(other);
  }

  /**
   * Creates a new Place RecordBuilder by copying an existing Place instance.
   * @param other The existing instance to copy.
   * @return A new Place RecordBuilder
   */
  public static com.alianca.intercab.emp.transactionreturn.Place.Builder newBuilder(com.alianca.intercab.emp.transactionreturn.Place other) {
    return new com.alianca.intercab.emp.transactionreturn.Place.Builder(other);
  }

  /**
   * RecordBuilder for Place instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Place>
    implements org.apache.avro.data.RecordBuilder<Place> {

    private int TransactionId;
    private java.lang.CharSequence ExternalSystemName;
    private java.lang.CharSequence ReturnCode;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.alianca.intercab.emp.transactionreturn.Place.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.TransactionId)) {
        this.TransactionId = data().deepCopy(fields()[0].schema(), other.TransactionId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ExternalSystemName)) {
        this.ExternalSystemName = data().deepCopy(fields()[1].schema(), other.ExternalSystemName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ReturnCode)) {
        this.ReturnCode = data().deepCopy(fields()[2].schema(), other.ReturnCode);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Place instance
     * @param other The existing instance to copy.
     */
    private Builder(com.alianca.intercab.emp.transactionreturn.Place other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.TransactionId)) {
        this.TransactionId = data().deepCopy(fields()[0].schema(), other.TransactionId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ExternalSystemName)) {
        this.ExternalSystemName = data().deepCopy(fields()[1].schema(), other.ExternalSystemName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ReturnCode)) {
        this.ReturnCode = data().deepCopy(fields()[2].schema(), other.ReturnCode);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'TransactionId' field.
      * @return The value.
      */
    public java.lang.Integer getTransactionId() {
      return TransactionId;
    }

    /**
      * Sets the value of the 'TransactionId' field.
      * @param value The value of 'TransactionId'.
      * @return This builder.
      */
    public com.alianca.intercab.emp.transactionreturn.Place.Builder setTransactionId(int value) {
      validate(fields()[0], value);
      this.TransactionId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'TransactionId' field has been set.
      * @return True if the 'TransactionId' field has been set, false otherwise.
      */
    public boolean hasTransactionId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'TransactionId' field.
      * @return This builder.
      */
    public com.alianca.intercab.emp.transactionreturn.Place.Builder clearTransactionId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'ExternalSystemName' field.
      * @return The value.
      */
    public java.lang.CharSequence getExternalSystemName() {
      return ExternalSystemName;
    }

    /**
      * Sets the value of the 'ExternalSystemName' field.
      * @param value The value of 'ExternalSystemName'.
      * @return This builder.
      */
    public com.alianca.intercab.emp.transactionreturn.Place.Builder setExternalSystemName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.ExternalSystemName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'ExternalSystemName' field has been set.
      * @return True if the 'ExternalSystemName' field has been set, false otherwise.
      */
    public boolean hasExternalSystemName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'ExternalSystemName' field.
      * @return This builder.
      */
    public com.alianca.intercab.emp.transactionreturn.Place.Builder clearExternalSystemName() {
      ExternalSystemName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'ReturnCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getReturnCode() {
      return ReturnCode;
    }

    /**
      * Sets the value of the 'ReturnCode' field.
      * @param value The value of 'ReturnCode'.
      * @return This builder.
      */
    public com.alianca.intercab.emp.transactionreturn.Place.Builder setReturnCode(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.ReturnCode = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'ReturnCode' field has been set.
      * @return True if the 'ReturnCode' field has been set, false otherwise.
      */
    public boolean hasReturnCode() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'ReturnCode' field.
      * @return This builder.
      */
    public com.alianca.intercab.emp.transactionreturn.Place.Builder clearReturnCode() {
      ReturnCode = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Place build() {
      try {
        Place record = new Place();
        record.TransactionId = fieldSetFlags()[0] ? this.TransactionId : (java.lang.Integer) defaultValue(fields()[0]);
        record.ExternalSystemName = fieldSetFlags()[1] ? this.ExternalSystemName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.ReturnCode = fieldSetFlags()[2] ? this.ReturnCode : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Place>
    WRITER$ = (org.apache.avro.io.DatumWriter<Place>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Place>
    READER$ = (org.apache.avro.io.DatumReader<Place>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
